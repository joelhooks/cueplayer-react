{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport ReactSlider from 'react-slider';\nimport { formatTime } from '../utils/format-time';\nimport Captions from './captions'; // this was just a small experiment but the overall player should have some\n// \"store\" concept\n\nimport { usePlayerStore } from './player';\n\nfunction VolumeSlider({\n  initialVolume,\n  onVolumeChange\n}) {\n  const [volume, setVolume] = React.useState(initialVolume);\n  return /*#__PURE__*/_jsxs(\"label\", {\n    children: [\"volume\", /*#__PURE__*/_jsx(\"input\", {\n      value: volume,\n      type: \"range\",\n      min: \"0\",\n      max: \"100\",\n      onChange: e => {\n        setVolume(Number(e.target.value));\n        onVolumeChange(Number(e.target.value));\n      }\n    })]\n  });\n}\n\nconst Controls = ({\n  player,\n  fullscreenElemRef\n}) => {\n  const [test, setTest] = React.useState(0);\n  const [volume, setVolume] = React.useState(30);\n  const currentTime = usePlayerStore(state => state.currentTime);\n  const duration = usePlayerStore(state => state.duration);\n  const dispatch = usePlayerStore(state => state.dispatch);\n  console.log(currentTime, duration);\n\n  function getPercent() {\n    const {\n      currentTime,\n      seekingTime,\n      duration\n    } = player;\n    const time = seekingTime || currentTime;\n    const percent = time / duration;\n    return percent >= 1 ? 1 : percent;\n  }\n\n  function onPlayerProgress(e) {\n    const player = e.target; // console.log(player.currentTime / player.duration)\n\n    const percent = player.currentTime / player.duration;\n    if (percent) setTest(percent * 100);\n  }\n\n  function onVolumeChange(e) {\n    const player = e.target;\n    console.log(player.volume);\n  }\n\n  function onPlay(e) {\n    const player = e.target;\n    console.log(player.duration);\n  }\n\n  function onPause(e) {\n    const player = e.target;\n    console.log(player.currentTime / player.duration);\n  }\n\n  React.useEffect(() => {\n    if (!player) return;\n    console.log('VOLUME EFFECT');\n    player.volume = volume / 100;\n  }, [player, volume]);\n  React.useEffect(() => {\n    if (!player) return; // subtitles on\n\n    for (var i = 0; i < player.textTracks.length; i++) {\n      player.textTracks[i].mode = 'hidden';\n    }\n\n    player.addEventListener('timeupdate', onPlayerProgress);\n    player.addEventListener('volumechange', onVolumeChange);\n    player.addEventListener('pause', onPause);\n    player.addEventListener('play', onPlay);\n    return () => {\n      player.removeEventListener('timeupdate', onPlayerProgress);\n      player.removeEventListener('volumechange', onVolumeChange);\n      player.removeEventListener('pause', onPause);\n      player.removeEventListener('play', onPlay);\n    };\n  }, [player]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'start',\n      maxWidth: '600px'\n    },\n    children: [/*#__PURE__*/_jsx(Captions, {}), /*#__PURE__*/_jsx(ReactSlider, {\n      max: duration,\n      value: currentTime,\n      className: \"horizontal-slider\",\n      thumbClassName: \"example-thumb\",\n      trackClassName: \"example-track\",\n      onAfterChange: value => {\n        dispatch({\n          type: 'TIME_CHANGE',\n          currentTime: value\n        });\n        player.currentTime = value;\n      },\n      onChange: value => {\n        dispatch({\n          type: 'TIME_CHANGE',\n          currentTime: value\n        });\n        player.currentTime = value;\n      },\n      renderThumb: (props, state) => /*#__PURE__*/_jsx(\"div\", _objectSpread(_objectSpread({}, props), {}, {\n        children: formatTime(state.valueNow)\n      }))\n    }), /*#__PURE__*/_jsx(\"button\", {\n      onClick: () => player.play(),\n      children: \"play\"\n    }), /*#__PURE__*/_jsx(\"button\", {\n      onClick: () => player.pause(),\n      children: \"pause\"\n    }), /*#__PURE__*/_jsx(\"button\", {\n      onClick: () => fullscreenElemRef.current.requestFullscreen(),\n      children: \"full screen\"\n    }), /*#__PURE__*/_jsx(VolumeSlider, {\n      initialVolume: volume,\n      onVolumeChange: volume => {\n        console.log(volume);\n        setVolume(volume);\n      }\n    })]\n  });\n};\n\nexport default Controls; // onPause,\n// onEnded,\n// onError,\n// onPlayerProgress,*\n// onSubtitleChange,\n// onVideoQualityChanged,\n// onMuted,\n// onViewModeChanged,\n// volumechanged*\n// stallstarted\n// stallended\n// unmuted\n// mute\n// onPlay\n// onReady\n// play\n// pause\n// isFullscreen\n// stop\n// seekTo\n// getCurrentTime\n// setVolume\n// setPlaybackRate\n// getDuration\n// getFractionPlayed\n// getFractionLoaded\n// getTimeToSeekSeconds\n//","map":null,"metadata":{},"sourceType":"module"}