{"ast":null,"code":"// NaN is the only value in javascript which is not equal to itself.\n// eslint-disable-next-line no-self-compare\nvar isNaN = Number.isNaN || function (value) {\n  return value !== value;\n};\n/**\n * @file format-time.js\n *\n * Format seconds as a time string, H:MM:SS or M:SS\n * Supplying a guide (in seconds) will force a number of leading zeros\n * to cover the length of the guide\n *\n * @param  {Number} seconds Number of seconds to be turned into a string\n * @param  {Number} guide   Number (in seconds) to model the string after\n * @return {String}         Time formatted as H:MM:SS or M:SS\n * @private\n * @function formatTime\n */\n\n\nexport function formatTime() {\n  var seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;\n  var s = Math.floor(seconds % 60);\n  var m = Math.floor(seconds / 60 % 60);\n  var h = Math.floor(seconds / 3600);\n  var gm = Math.floor(guide / 60 % 60);\n  var gh = Math.floor(guide / 3600); // handle invalid times\n\n  if (isNaN(seconds) || seconds === Infinity) {\n    // '-' is false for all relational operators (e.g. <, >=) so this setting\n    // will add the minimum number of fields specified by the guide\n    h = '-';\n    m = '-';\n    s = '-';\n  } // Check if we need to show hours\n\n\n  h = h > 0 || gh > 0 ? \"\".concat(h, \":\") : ''; // If hours are showing, we may need to add a leading zero.\n  // Always show at least one digit of minutes.\n\n  m = \"\".concat((h || gm >= 10) && m < 10 ? \"0\".concat(m) : m, \":\"); // Check if leading zero is need for seconds\n\n  s = s < 10 ? \"0\".concat(s) : s;\n  return h + m + s;\n}","map":{"version":3,"sources":["/Users/joel/Code/joelhooks/cueplayer-react/src/utils/format-time.ts"],"names":["isNaN","Number","value","formatTime","seconds","guide","s","Math","floor","m","h","gm","gh","Infinity"],"mappings":"AAAA;AACA;AACA,IAAMA,KAAK,GAAGC,MAAM,CAACD,KAAP,IAAiB,UAACE,KAAD;AAAA,SAAWA,KAAK,KAAKA,KAArB;AAAA,CAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,UAAT,GAAkD;AAAA,MAA9BC,OAA8B,uEAApB,CAAoB;AAAA,MAAjBC,KAAiB,uEAATD,OAAS;AACvD,MAAIE,CAAM,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAO,GAAG,EAArB,CAAb;AACA,MAAIK,CAAM,GAAGF,IAAI,CAACC,KAAL,CAAYJ,OAAO,GAAG,EAAX,GAAiB,EAA5B,CAAb;AACA,MAAIM,CAAM,GAAGH,IAAI,CAACC,KAAL,CAAWJ,OAAO,GAAG,IAArB,CAAb;AACA,MAAMO,EAAO,GAAGJ,IAAI,CAACC,KAAL,CAAYH,KAAK,GAAG,EAAT,GAAe,EAA1B,CAAhB;AACA,MAAMO,EAAO,GAAGL,IAAI,CAACC,KAAL,CAAWH,KAAK,GAAG,IAAnB,CAAhB,CALuD,CAOvD;;AACA,MAAIL,KAAK,CAACI,OAAD,CAAL,IAAkBA,OAAO,KAAKS,QAAlC,EAA4C;AAC1C;AACA;AACAH,IAAAA,CAAC,GAAG,GAAJ;AACAD,IAAAA,CAAC,GAAG,GAAJ;AACAH,IAAAA,CAAC,GAAG,GAAJ;AACD,GAdsD,CAgBvD;;;AACAI,EAAAA,CAAC,GAAGA,CAAC,GAAG,CAAJ,IAASE,EAAE,GAAG,CAAd,aAAqBF,CAArB,SAA4B,EAAhC,CAjBuD,CAmBvD;AACA;;AACAD,EAAAA,CAAC,aAAM,CAACC,CAAC,IAAIC,EAAE,IAAI,EAAZ,KAAmBF,CAAC,GAAG,EAAvB,cAAgCA,CAAhC,IAAsCA,CAA5C,MAAD,CArBuD,CAuBvD;;AACAH,EAAAA,CAAC,GAAGA,CAAC,GAAG,EAAJ,cAAaA,CAAb,IAAmBA,CAAvB;AAEA,SAAOI,CAAC,GAAGD,CAAJ,GAAQH,CAAf;AACD","sourcesContent":["// NaN is the only value in javascript which is not equal to itself.\n// eslint-disable-next-line no-self-compare\nconst isNaN = Number.isNaN || ((value) => value !== value)\n\n/**\n * @file format-time.js\n *\n * Format seconds as a time string, H:MM:SS or M:SS\n * Supplying a guide (in seconds) will force a number of leading zeros\n * to cover the length of the guide\n *\n * @param  {Number} seconds Number of seconds to be turned into a string\n * @param  {Number} guide   Number (in seconds) to model the string after\n * @return {String}         Time formatted as H:MM:SS or M:SS\n * @private\n * @function formatTime\n */\nexport function formatTime(seconds = 0, guide = seconds) {\n  let s: any = Math.floor(seconds % 60)\n  let m: any = Math.floor((seconds / 60) % 60)\n  let h: any = Math.floor(seconds / 3600)\n  const gm: any = Math.floor((guide / 60) % 60)\n  const gh: any = Math.floor(guide / 3600)\n\n  // handle invalid times\n  if (isNaN(seconds) || seconds === Infinity) {\n    // '-' is false for all relational operators (e.g. <, >=) so this setting\n    // will add the minimum number of fields specified by the guide\n    h = '-'\n    m = '-'\n    s = '-'\n  }\n\n  // Check if we need to show hours\n  h = h > 0 || gh > 0 ? `${h}:` : ''\n\n  // If hours are showing, we may need to add a leading zero.\n  // Always show at least one digit of minutes.\n  m = `${(h || gm >= 10) && m < 10 ? `0${m}` : m}:`\n\n  // Check if leading zero is need for seconds\n  s = s < 10 ? `0${s}` : s\n\n  return h + m + s\n}\n"]},"metadata":{},"sourceType":"module"}