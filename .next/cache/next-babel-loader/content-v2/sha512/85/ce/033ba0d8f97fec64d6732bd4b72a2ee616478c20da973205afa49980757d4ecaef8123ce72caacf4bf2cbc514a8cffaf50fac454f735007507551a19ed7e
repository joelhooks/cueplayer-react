{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/joel/Code/joelhooks/cueplayer-react/src/components/controls.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport ReactSlider from 'react-slider';\nimport { formatTime } from '../utils/format-time';\nimport Captions from './captions'; // this was just a small experiment but the overall player should have some\n// \"store\" concept\n\nimport { usePlayerStore } from './player';\n\nfunction VolumeSlider({\n  initialVolume,\n  onVolumeChange\n}) {\n  const [volume, setVolume] = React.useState(initialVolume);\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [\"volume\", /*#__PURE__*/_jsxDEV(\"input\", {\n      value: volume,\n      type: \"range\",\n      min: \"0\",\n      max: \"100\",\n      onChange: e => {\n        setVolume(Number(e.target.value));\n        onVolumeChange(Number(e.target.value));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\nconst Controls = ({\n  player,\n  fullscreenElemRef\n}) => {\n  const [test, setTest] = React.useState(0);\n  const [volume, setVolume] = React.useState(30);\n  const currentTime = usePlayerStore(state => state.currentTime);\n  const duration = usePlayerStore(state => state.duration);\n  const dispatch = usePlayerStore(state => state.dispatch);\n  console.log(currentTime, duration);\n\n  function getPercent() {\n    const {\n      currentTime,\n      seekingTime,\n      duration\n    } = player;\n    const time = seekingTime || currentTime;\n    const percent = time / duration;\n    return percent >= 1 ? 1 : percent;\n  }\n\n  function onPlayerProgress(e) {\n    const player = e.target; // console.log(player.currentTime / player.duration)\n\n    const percent = player.currentTime / player.duration;\n    if (percent) setTest(percent * 100);\n  }\n\n  function onVolumeChange(e) {\n    const player = e.target;\n    console.log(player.volume);\n  }\n\n  function onPlay(e) {\n    const player = e.target;\n    console.log(player.duration);\n  }\n\n  function onPause(e) {\n    const player = e.target;\n    console.log(player.currentTime / player.duration);\n  }\n\n  React.useEffect(() => {\n    if (!player) return;\n    console.log('VOLUME EFFECT');\n    player.volume = volume / 100;\n  }, [player, volume]);\n  React.useEffect(() => {\n    if (!player) return; // subtitles on\n\n    for (var i = 0; i < player.textTracks.length; i++) {\n      player.textTracks[i].mode = 'hidden';\n    }\n\n    player.addEventListener('timeupdate', onPlayerProgress);\n    player.addEventListener('volumechange', onVolumeChange);\n    player.addEventListener('pause', onPause);\n    player.addEventListener('play', onPlay);\n    return () => {\n      player.removeEventListener('timeupdate', onPlayerProgress);\n      player.removeEventListener('volumechange', onVolumeChange);\n      player.removeEventListener('pause', onPause);\n      player.removeEventListener('play', onPlay);\n    };\n  }, [player]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'start',\n      maxWidth: '600px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Captions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactSlider, {\n      max: duration,\n      value: currentTime,\n      className: \"horizontal-slider\",\n      thumbClassName: \"example-thumb\",\n      trackClassName: \"example-track\",\n      onAfterChange: value => {\n        dispatch({\n          type: 'TIME_CHANGE',\n          currentTime: value\n        });\n        player.currentTime = value;\n      },\n      onChange: value => {\n        dispatch({\n          type: 'TIME_CHANGE',\n          currentTime: value\n        });\n        player.currentTime = value;\n      },\n      renderThumb: (props, state) => /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, props), {}, {\n        children: formatTime(state.valueNow)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => player.play(),\n      children: \"play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => player.pause(),\n      children: \"pause\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => fullscreenElemRef.current.requestFullscreen(),\n      children: \"full screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VolumeSlider, {\n      initialVolume: volume,\n      onVolumeChange: volume => {\n        console.log(volume);\n        setVolume(volume);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Controls; // onPause,\n// onEnded,\n// onError,\n// onPlayerProgress,*\n// onSubtitleChange,\n// onVideoQualityChanged,\n// onMuted,\n// onViewModeChanged,\n// volumechanged*\n// stallstarted\n// stallended\n// unmuted\n// mute\n// onPlay\n// onReady\n// play\n// pause\n// isFullscreen\n// stop\n// seekTo\n// getCurrentTime\n// setVolume\n// setPlaybackRate\n// getDuration\n// getFractionPlayed\n// getFractionLoaded\n// getTimeToSeekSeconds\n//","map":{"version":3,"sources":["/Users/joel/Code/joelhooks/cueplayer-react/src/components/controls.tsx"],"names":["React","ReactSlider","formatTime","Captions","usePlayerStore","VolumeSlider","initialVolume","onVolumeChange","volume","setVolume","useState","e","Number","target","value","Controls","player","fullscreenElemRef","test","setTest","currentTime","state","duration","dispatch","console","log","getPercent","seekingTime","time","percent","onPlayerProgress","onPlay","onPause","useEffect","i","textTracks","length","mode","addEventListener","removeEventListener","display","flexDirection","justifyContent","maxWidth","type","props","valueNow","play","pause","current","requestFullscreen"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport ReactSlider from 'react-slider'\nimport {formatTime} from '../utils/format-time'\nimport Captions from './captions'\n\n// this was just a small experiment but the overall player should have some\n// \"store\" concept\n\nimport {usePlayerStore} from './player'\n\nfunction VolumeSlider({\n  initialVolume,\n  onVolumeChange,\n}: {\n  initialVolume: number\n  onVolumeChange: any\n}) {\n  const [volume, setVolume] = React.useState<number>(initialVolume)\n  return (\n    <label>\n      volume\n      <input\n        value={volume}\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        onChange={(e) => {\n          setVolume(Number(e.target.value))\n          onVolumeChange(Number(e.target.value))\n        }}\n      />\n    </label>\n  )\n}\n\nconst Controls: React.FC<{player: any; fullscreenElemRef: any}> = ({\n  player,\n  fullscreenElemRef,\n}) => {\n  const [test, setTest] = React.useState(0)\n  const [volume, setVolume] = React.useState(30)\n\n  const currentTime: any = usePlayerStore((state) => state.currentTime)\n  const duration: any = usePlayerStore((state) => state.duration)\n\n  const dispatch: any = usePlayerStore((state) => state.dispatch)\n\n  console.log(currentTime, duration)\n  function getPercent() {\n    const {currentTime, seekingTime, duration} = player\n    const time = seekingTime || currentTime\n    const percent = time / duration\n    return percent >= 1 ? 1 : percent\n  }\n\n  function onPlayerProgress(e: any) {\n    const player = e.target as HTMLMediaElement\n    // console.log(player.currentTime / player.duration)\n    const percent = player.currentTime / player.duration\n    if (percent) setTest(percent * 100)\n  }\n\n  function onVolumeChange(e: any) {\n    const player = e.target as HTMLMediaElement\n    console.log(player.volume)\n  }\n\n  function onPlay(e: any) {\n    const player = e.target as HTMLMediaElement\n    console.log(player.duration)\n  }\n\n  function onPause(e: any) {\n    const player = e.target as HTMLMediaElement\n    console.log(player.currentTime / player.duration)\n  }\n\n  React.useEffect(() => {\n    if (!player) return\n    console.log('VOLUME EFFECT')\n    player.volume = volume / 100\n  }, [player, volume])\n\n  React.useEffect(() => {\n    if (!player) return\n\n    // subtitles on\n    for (var i = 0; i < player.textTracks.length; i++) {\n      player.textTracks[i].mode = 'hidden'\n    }\n\n    player.addEventListener('timeupdate', onPlayerProgress)\n    player.addEventListener('volumechange', onVolumeChange)\n    player.addEventListener('pause', onPause)\n    player.addEventListener('play', onPlay)\n    return () => {\n      player.removeEventListener('timeupdate', onPlayerProgress)\n      player.removeEventListener('volumechange', onVolumeChange)\n      player.removeEventListener('pause', onPause)\n      player.removeEventListener('play', onPlay)\n    }\n  }, [player])\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'start',\n        maxWidth: '600px',\n      }}\n    >\n      <Captions />\n      {/* styled via global CSS */}\n      <ReactSlider\n        max={duration}\n        value={currentTime}\n        className=\"horizontal-slider\"\n        thumbClassName=\"example-thumb\"\n        trackClassName=\"example-track\"\n        onAfterChange={(value) => {\n          dispatch({type: 'TIME_CHANGE', currentTime: value})\n          player.currentTime = value\n        }}\n        onChange={(value) => {\n          dispatch({type: 'TIME_CHANGE', currentTime: value})\n          player.currentTime = value\n        }}\n        renderThumb={(props, state) => (\n          <div {...props}>{formatTime(state.valueNow)}</div>\n        )}\n      />\n\n      <button onClick={() => player.play()}>play</button>\n      <button onClick={() => player.pause()}>pause</button>\n      <button onClick={() => fullscreenElemRef.current.requestFullscreen()}>\n        full screen\n      </button>\n      <VolumeSlider\n        initialVolume={volume}\n        onVolumeChange={(volume: number) => {\n          console.log(volume)\n          setVolume(volume)\n        }}\n      />\n    </div>\n  )\n}\n\nexport default Controls\n\n// onPause,\n// onEnded,\n// onError,\n// onPlayerProgress,*\n// onSubtitleChange,\n// onVideoQualityChanged,\n// onMuted,\n// onViewModeChanged,\n// volumechanged*\n// stallstarted\n// stallended\n// unmuted\n// mute\n\n// onPlay\n// onReady\n\n// play\n// pause\n// isFullscreen\n// stop\n// seekTo\n// getCurrentTime\n// setVolume\n// setPlaybackRate\n// getDuration\n// getFractionPlayed\n// getFractionLoaded\n// getTimeToSeekSeconds\n//\n"]},"metadata":{},"sourceType":"module"}